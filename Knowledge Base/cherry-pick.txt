Cherry-Picking Commits from Dev to UAT Branch

Step 1: Create a Dev Branch

Create a feature branch from dev following this naming convention:

git checkout feature/<ticket_number>-dev

Step 2: Commit Your Changes

Let's say you committed twice in this branch, and your commit IDs are 1abc and 2xyz.

Step 3: Switch to the UAT Branch

Now, switch to your UAT branch in VS Code:

git checkout feature/<ticket_number>-uat

Step 4: Cherry-Pick Commits

Run the following command in your VS Code terminal to bring your changes from the dev branch:

git cherry-pick 1abc 2xyz

This will apply the selected commits to your local UAT branch. If there are merge conflicts, Git will display them.

To cherry-pick all the commits from commit A to commit B (where A is older than B), run:

git cherry-pick A^..B


Step 5: Resolve Merge Conflicts

If conflicts occur, resolve them manually and then commit the changes to your UAT branch.


Advantages of This Approach

You don't have to retrieve your changes from your org every time.
Additional modified files (e.g., allTestClasses.txt and post_deployment_steps.txt) will be automatically committed along with your previous changes, eliminating the need to create/modify them again.
You don't have to provide commit messages every time you commit in the uat branch.

Additional Git Commands

If there are conflicts during cherry-picking, resolve them and continue:

git cherry-pick --continue

If needed, you can abort the cherry-pick process.

git cherry-pick --abort

